# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

executors:
  macos-x64:
    macos:
      xcode: "13.4.1"
    resource_class: macos.x86.medium.gen2

commands:
  install-relocatable-libcurl-build-deps:
    steps:
      - restore_cache:
          keys:
            - v1-brew-{{ arch }}-{{ checksum "scripts/install-relocatable-libcurl-build-deps.sh" }}
      - run:
          name: Installing dependencies
          command: scripts/install-relocatable-libcurl-build-deps.sh
      - save_cache:
          key: v1-brew-{{ arch }}-{{ checksum "scripts/install-relocatable-libcurl-build-deps.sh" }}
          paths:
            - /opt/homebrew/Library/Taps/homebrew/homebrew-bundle
            - /usr/local/Homebrew/Library/Taps/homebrew/homebrew-bundle
            - /Users/distiller/Library/Caches/Homebrew

  install-libwormhole-build-deps:
    steps:
      - restore_cache:
          keys:
            - v1-brew-{{ arch }}-{{ checksum "scripts/install-libwormhole-build-deps.sh" }}
      - run:
          name: Installing dependencies
          command: scripts/install-libwormhole-build-deps.sh
      - save_cache:
          key: v1-brew-{{ arch }}-{{ checksum "scripts/install-libwormhole-build-deps.sh" }}
          paths:
            - /opt/homebrew/Library/Taps/homebrew/homebrew-bundle
            - /usr/local/Homebrew/Library/Taps/homebrew/homebrew-bundle
            - /Users/distiller/Library/Caches/Homebrew

  install-npm-library-build-deps:
    steps:
      - restore_cache:
          keys:
            - v1-brew-{{ arch }}-{{ checksum "scripts/install-npm-library-build-deps.sh" }}
      - run:
          name: Installing dependencies
          command: scripts/install-npm-library-build-deps.sh
      - save_cache:
          key: v1-brew-{{ arch }}-{{ checksum "scripts/install-npm-library-build-deps.sh" }}
          paths:
            - /opt/homebrew/Library/Taps/homebrew/homebrew-bundle
            - /usr/local/Homebrew/Library/Taps/homebrew/homebrew-bundle
            - /Users/distiller/Library/Caches/Homebrew

  lint-cpp:
    steps:
      - restore_cache:
          keys:
            - v1-brew-{{ arch }}-{{ checksum "scripts/install-clang-format.sh" }}
      - run:
          name: Installing clang-format
          command: scripts/install-clang-format.sh
      - save_cache:
          key: v1-brew-{{ arch }}-{{ checksum "scripts/install-clang-format.sh" }}
          paths:
            - /opt/homebrew/Library/Taps/homebrew/homebrew-bundle
            - /usr/local/Homebrew/Library/Taps/homebrew/homebrew-bundle
            - /Users/distiller/Library/Caches/Homebrew
      - run:
          name: Run C++ linter
          command: clang-format --style=file --dry-run -Werror -i src/*.cc test/*.cc binding/*.cc

  lint-shell:
    steps:
      - restore_cache:
          keys:
            - v1-brew-{{ arch }}-{{ checksum "scripts/install-shellcheck.sh" }}
      - run:
          name: Installing shellcheck
          command: scripts/install-shellcheck.sh
      - save_cache:
          key: v1-brew-{{ arch }}-{{ checksum "scripts/install-shellcheck.sh" }}
          paths:
            - /opt/homebrew/Library/Taps/homebrew/homebrew-bundle
            - /usr/local/Homebrew/Library/Taps/homebrew/homebrew-bundle
            - /Users/distiller/Library/Caches/Homebrew
      - run:
          name: Run Shellcheck for Shell scripts
          command: shellcheck scripts/*.sh

  build-relocatable-libcurl:
    steps:
      - run:
          name: Build relocatable libcurl
          command: scripts/build.sh
      - run:
          name: Create relocatable_libcurl.zip
          command: zip -r relocatable_libcurl.zip relocatable_libcurl
      - store_artifacts:
          path: relocatable_libcurl.zip
      - run:
          name: Delete relocatable_libcurl.zip
          command: rm relocatable_libcurl.zip

  build-cmake-library:
    steps:
      - run:
          name: Build CMake library
          command: cmake -S . -B cmake_build && cmake --build cmake_build && cmake --install cmake_build --prefix relocatable_libwormhole && install_name_tool -id @rpath/lib/libwormhole.dylib relocatable_libwormhole/lib/libwormhole.dylib
      - run:
          name: Create relocatable_libwormhole.zip
          command: zip -r relocatable_libwormhole.zip relocatable_libwormhole
      - store_artifacts:
          path: relocatable_libwormhole.zip
      - run:
          name: Delete relocatable_libwormhole.zip
          command: rm relocatable_libwormhole.zip

  build-npm-library:
    steps:
      - run:
          name: Build NPM project
          command: npm run build

  lint-js-library:
    steps:
      - run:
          name: Run JS linter
          command: npm run lint

  test-curl-build:
    steps:
      - run:
          name: Curl test
          command: ./curl_build/vendor_install/bin/curl --http3 https://postman-echo.com/get

  test-cmake-library:
    steps:
      - run:
          name: Test CMake library
          command: ./cmake_build/test/request_unit_test

  test-npm-library:
    steps:
      - run:
          name: Test NPM library
          command: npm test

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test-relocatable-libcurl:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    executor: macos-x64

    environment:
      HOMEBREW_NO_ANALYTICS: 1
      # This prevent brew from running:
      # Running `brew update --preinstall`...
      # as it's a slow operation and we should avoid such delays if we can help
      # it.
      HOMEBREW_NO_AUTO_UPDATE: 1

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - install-relocatable-libcurl-build-deps
      - build-relocatable-libcurl
      - test-curl-build
      - persist_to_workspace:
          root: .
          paths:
            - relocatable_libcurl

  build-and-test-cmake-library:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    executor: macos-x64

    environment:
      HOMEBREW_NO_ANALYTICS: 1
      # This prevent brew from running:
      # Running `brew update --preinstall`...
      # as it's a slow operation and we should avoid such delays if we can help
      # it.
      HOMEBREW_NO_AUTO_UPDATE: 1

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install-libwormhole-build-deps
      - build-cmake-library
      - test-cmake-library
      - persist_to_workspace:
          root: .
          paths:
            - relocatable_libwormhole

  lint-js:
    executor: macos-x64

    environment:
      HOMEBREW_NO_ANALYTICS: 1
      # This prevent brew from running:
      # Running `brew update --preinstall`...
      # as it's a slow operation and we should avoid such delays if we can help
      # it.
      HOMEBREW_NO_AUTO_UPDATE: 1

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install-npm-library-build-deps
      - lint-js-library

  lint-cpp:
    executor: macos-x64

    environment:
      HOMEBREW_NO_ANALYTICS: 1
      # This prevent brew from running:
      # Running `brew update --preinstall`...
      # as it's a slow operation and we should avoid such delays if we can help
      # it.
      HOMEBREW_NO_AUTO_UPDATE: 1

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - attach_workspace:
          at: .
      - lint-cpp

  lint-shell:
    executor: macos-x64

    environment:
      HOMEBREW_NO_ANALYTICS: 1
      # This prevent brew from running:
      # Running `brew update --preinstall`...
      # as it's a slow operation and we should avoid such delays if we can help
      # it.
      HOMEBREW_NO_AUTO_UPDATE: 1

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - attach_workspace:
          at: .
      - lint-shell

  build-and-test-npm-library:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    executor: macos-x64

    environment:
      HOMEBREW_NO_ANALYTICS: 1
      # This prevent brew from running:
      # Running `brew update --preinstall`...
      # as it's a slow operation and we should avoid such delays if we can help
      # it.
      HOMEBREW_NO_AUTO_UPDATE: 1

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install-npm-library-build-deps
      - build-npm-library
      - test-npm-library
      - run:
          command: mkdir -p package && npm pack --pack-destination package
      - store_artifacts:
          path: package

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  wormhole:
    jobs:
      - lint-shell
      - lint-cpp
      - lint-js
      - build-and-test-relocatable-libcurl
      - build-and-test-cmake-library:
          requires:
            - build-and-test-relocatable-libcurl
      - build-and-test-npm-library:
          requires:
            - build-and-test-cmake-library
